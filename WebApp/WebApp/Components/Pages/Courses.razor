@page "/courses"

@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section id="courses">
    <div class="container">

        <nav aria-label="breadcrumb">
            <ul class="breadcrumb">

                <li class="breadcrumb-item">
                    <a asp-controller="Home" asp-action="Index">
                        <span><i class="fa-solid fa-house" aria-hidden="true"></i></span>
                        <span>Home</span>
                    </a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">
                    <span><i class="fa-solid fa-angles-right" aria-hidden="true"></i></span>
                    <span>Courses</span>
                </li>
            </ul>
        </nav>

        <div class="header-courses">
            <h1>Courses</h1>
            <form class="filters">

                <div class="select">
                    <div class="selected">All categories</div>
                    <div class="select-options">
                        <div class="option" data-value="all">All categories</div>
@*                         @if (courses.Categories != null)
                        {
                            foreach (var category in Model.Categories)
                            {
                                <div class="option" data-value="@category.CategoryName">@category.CategoryName</div>
                            }
                        } *@
                    </div>
                </div>

                <div class="input-search-group">
                    <input id="searchQuery" name="searchQuery" placeholder="Search courses" />
                    <i class="fa-regular fa-search"></i>
                </div>

            </form>
        </div>
        <div class="items">
            @if (courses == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    <div class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>
                        }

                        <button id="bookmark-button" class="btn-circle bookmark" data-bs-toggle="tooltip" data-bs-title="Save Course"><i class="fa-regular fa-bookmark"></i></button>

                        <img src="/images/courses/@course.ImageUri" alt="@course.Title">

                        <div class="content" onclick="location.href='/courses/@course.Id'">
                            <h5>@course.Title</h5>
                            <p class="author">By @string.Join(", ", course.Authors!.Select(a => a.Name))</p>
@*                             @foreach (var author in courses)
                            {
                                <p class="author">By @course.Authors</p>
                            } *@

                            @if (course.Prices != null)
                            {
                                <div class="pricing">
                                    @if (course.Prices.Discount > 0)
                                    {
                                        <p class="discount">
                                            @course.Prices.Currency @course.Prices.Discount
                                            <del>@course.Prices.Currency @course.Prices.Price</del>
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="original">@course.Prices.Currency @course.Prices.Price</p>
                                    }
                                </div>
                            }
@*                             <div class="pricing">
                                @if (!string.IsNullOrEmpty(course.Prices?.Discount))
                                {
                                    <div class="discount">@course.Prices.Discount</div>
                                }

                                <div class="original @(!string.IsNullOrEmpty(course.Prices?.Discount) ? "discount-enabled" : "")">@course.Prices?.Price</div>
                            </div> *@
                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i>@course.Hours hours
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i>@course.LikesInProcent (@course.Likes)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="pagination">
            <a class="number active" href="/courses">1</a>
            <a class="number" href="/courses">2</a>
            <a class="number" href="/courses">3</a>
        </div>
@*         @if (Model.Courses != null)
        {


            @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
            {
                <div class="pagination">
                    <i class="fa-solid fa-less-than"></i>
                    @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                    {
                        if (i == Model.Pagination.CurrentPage)
                        {
                            <span class="number active">@i</span>
                        }
                        else
                        {
                            <a class="number" href="@Url.Action("Courses", new { pageNumber = i, pageSize = Model.Pagination.PageSize })">@i</a>
                        }
                    }
                    <i class="fa-solid fa-greater-than"></i>
                </div>
            }
        } *@
        <div class="work-section">
            <div class="work-text">
                <h5>Ready to get Started?</h5>
                <h1>Take Your <span class="header-skills">Skills</span> to the <br>Next Level</h1>
                <button class="btn-theme-s">Work with us</button>
            </div>
            <div class="work-img">
                <img src="~/images/work-image.svg" alt="">
            </div>
        </div>
    </div>
</section>

@code {
    private List<Course>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = @"
        query {
            getCourses {
                id
                imageUri
                isBestseller
                title
                authors {
                    name
                }
                prices {
                    currency
                    price
                    discount
                }
                starRating
                reviews
                likesInProcent
                likes
                hours
            }
        }"
            };

        var response = await Http.PostAsJsonAsync("https://courseprovider-nikesjo.azurewebsites.net/api/graphql?code=E2an0F4ye5fmD9IGxflSEEA2A3PQsf23TSD8CNFm1n2FAzFuR2IXJg%3D%3D", query);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            if (result?.Data.TryGetProperty("getCourses", out var coursesJson) == true)
            {
                courses = coursesJson.EnumerateArray()
                    .Select(course => new Course
                    {
                        Id = course.GetProperty("id").GetString()!,
                        IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Authors = course.GetProperty("authors").EnumerateArray()
                                .Select(author => new Author
                                {
                                    Name = author.GetProperty("name").GetString()!,
                                }).ToList(),
                        Prices = new Prices
                        {
                            Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
                            Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                            Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
                        },
                        StarRating = course.GetProperty("starRating").GetDecimal(),
                        Reviews = course.GetProperty("reviews").GetString(),
                        LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                        Likes = course.GetProperty("likes").GetString(),
                        Hours = course.GetProperty("hours").GetString()
                    }).ToList();
            }
        }
    }
}